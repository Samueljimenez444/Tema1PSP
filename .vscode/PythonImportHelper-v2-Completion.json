[
    {
        "label": "pydantic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydantic",
        "description": "pydantic",
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Asignatura",
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "isExtraImport": true,
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Asignatura",
        "kind": 6,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "class Asignatura(BaseModel):\n    id : int\n    titulo : str\n    num_horas : int\n    id_profesor : int\nlista_asignaturas = [\n    Asignatura(id = 1, titulo=\"Programacion\", num_horas=10, id_profesor=3),\n    Asignatura(id = 2, titulo = \"Sistemas\" , num_horas=5, id_profesor = 1),\n    Asignatura(id = 3 , titulo = \"Moviles\" , num_horas = 3 , id_profesor = 2)\n]",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "next_id",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def next_id():\n    return max(asignatura.id for asignatura in lista_asignaturas) + 1\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"API de asignaturas\"}\n@app.get(\"/asignaturas\")\ndef buscar_asignaturas():   \n    return lista_asignaturas\n@app.get(\"/asignaturas/id/{id}\")\ndef buscar_asignaturas_id(id : int):",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def root():\n    return {\"message\": \"API de asignaturas\"}\n@app.get(\"/asignaturas\")\ndef buscar_asignaturas():   \n    return lista_asignaturas\n@app.get(\"/asignaturas/id/{id}\")\ndef buscar_asignaturas_id(id : int):\n    for asignatura in lista_asignaturas:\n        if(asignatura.id == id):\n            return asignatura",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "buscar_asignaturas",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def buscar_asignaturas():   \n    return lista_asignaturas\n@app.get(\"/asignaturas/id/{id}\")\ndef buscar_asignaturas_id(id : int):\n    for asignatura in lista_asignaturas:\n        if(asignatura.id == id):\n            return asignatura\n    raise HTTPException (status_code=404, detail=\"Asignatura con esa id no encontrado\")\n@app.get(\"/asignaturas/idProfesor/{id_profesor}\")\ndef buscar_asignaturas_id_profesor(id_profesor : int):",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "buscar_asignaturas_id",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def buscar_asignaturas_id(id : int):\n    for asignatura in lista_asignaturas:\n        if(asignatura.id == id):\n            return asignatura\n    raise HTTPException (status_code=404, detail=\"Asignatura con esa id no encontrado\")\n@app.get(\"/asignaturas/idProfesor/{id_profesor}\")\ndef buscar_asignaturas_id_profesor(id_profesor : int):\n    for asignatura in lista_asignaturas:\n        if asignatura.id_profesor == id_profesor:\n            return asignatura",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "buscar_asignaturas_id_profesor",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def buscar_asignaturas_id_profesor(id_profesor : int):\n    for asignatura in lista_asignaturas:\n        if asignatura.id_profesor == id_profesor:\n            return asignatura\n    raise HTTPException (status_code=404, detail=\"Asignatura con esa id de profesor no encontrado\")\n@app.post(\"/asignatura\" , status_code=201, response_model=Asignatura)\ndef añadir_profesor(asignatura : Asignatura):\n    asignatura.id=next_id()\n    lista_asignaturas.append(asignatura)\n    return asignatura",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "añadir_profesor",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def añadir_profesor(asignatura : Asignatura):\n    asignatura.id=next_id()\n    lista_asignaturas.append(asignatura)\n    return asignatura\n@app.put(\"/asignatura\" , response_model=Asignatura)\ndef modificar_profesor(id: int, asignatura: Asignatura):\n        for index, asgnatura_guardada in enumerate(lista_asignaturas):\n            if(asgnatura_guardada.id == id):\n                asignatura.id=id\n                lista_asignaturas[index] = asignatura",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "modificar_profesor",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def modificar_profesor(id: int, asignatura: Asignatura):\n        for index, asgnatura_guardada in enumerate(lista_asignaturas):\n            if(asgnatura_guardada.id == id):\n                asignatura.id=id\n                lista_asignaturas[index] = asignatura\n                return asignatura\n        raise HTTPException(status_code=404, detail=\"Profesor no encontrado\")\n@app.delete(\"/asignatura/{id}\")\ndef borrar_profesor(id:int):\n    for asignatura_guardada in lista_asignaturas:",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "borrar_profesor",
        "kind": 2,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "def borrar_profesor(id:int):\n    for asignatura_guardada in lista_asignaturas:\n        if asignatura_guardada.id == id:\n            lista_asignaturas.remove(asignatura_guardada)\n            return{}\n    raise HTTPException(status_code=404 , detail=\"Profesor no encontrado\")",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "app = FastAPI()\nclass Asignatura(BaseModel):\n    id : int\n    titulo : str\n    num_horas : int\n    id_profesor : int\nlista_asignaturas = [\n    Asignatura(id = 1, titulo=\"Programacion\", num_horas=10, id_profesor=3),\n    Asignatura(id = 2, titulo = \"Sistemas\" , num_horas=5, id_profesor = 1),\n    Asignatura(id = 3 , titulo = \"Moviles\" , num_horas = 3 , id_profesor = 2)",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "lista_asignaturas",
        "kind": 5,
        "importPath": "Proyecto.asignaturas",
        "description": "Proyecto.asignaturas",
        "peekOfCode": "lista_asignaturas = [\n    Asignatura(id = 1, titulo=\"Programacion\", num_horas=10, id_profesor=3),\n    Asignatura(id = 2, titulo = \"Sistemas\" , num_horas=5, id_profesor = 1),\n    Asignatura(id = 3 , titulo = \"Moviles\" , num_horas = 3 , id_profesor = 2)\n]\ndef next_id():\n    return max(asignatura.id for asignatura in lista_asignaturas) + 1\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"API de asignaturas\"}",
        "detail": "Proyecto.asignaturas",
        "documentation": {}
    },
    {
        "label": "Profesor",
        "kind": 6,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "class Profesor(BaseModel):\n    id: Optional[int] = None\n    DNI: str\n    nombre: str\n    apellidos: str\n    telefono: str\n    direccion: str\n    cuentaBancaria: str\nprofesores_db = [\n    Profesor(id=1, DNI=\"123432456A\", nombre=\"Fernando\", apellidos=\"Galiana\", telefono=\"654123456\", direccion=\"Calle Victor Torres\", cuentaBancaria=\"ES3424234234\"),",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def root():\n    return {\"message\": \"API de Profesores\"}\n@app.get(\"/profesores\")\ndef get_profesores():\n    return profesores_db\n@app.get(\"/profesores/{id}\")\ndef get_profesor(id: int):\n    for profesor in profesores_db:\n        if profesor.id == id:\n            return profesor",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "get_profesores",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def get_profesores():\n    return profesores_db\n@app.get(\"/profesores/{id}\")\ndef get_profesor(id: int):\n    for profesor in profesores_db:\n        if profesor.id == id:\n            return profesor\n    return {\"error\": \"Profesor no encontrado\"}\n@app.get(\"/profesores/buscarDNI/{DNI}\")\ndef get_profesor_dni(DNI: str):",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "get_profesor",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def get_profesor(id: int):\n    for profesor in profesores_db:\n        if profesor.id == id:\n            return profesor\n    return {\"error\": \"Profesor no encontrado\"}\n@app.get(\"/profesores/buscarDNI/{DNI}\")\ndef get_profesor_dni(DNI: str):\n    for profesor in profesores_db:\n        if profesor.DNI == DNI:\n            return profesor",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "get_profesor_dni",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def get_profesor_dni(DNI: str):\n    for profesor in profesores_db:\n        if profesor.DNI == DNI:\n            return profesor\n    return {\"error\": \"Profesor no encontrado\"}\n@app.get(\"/profesores/buscarNombre/{nombre}\")\ndef get_profesor_nombre(nombre: str):\n    for profesor in profesores_db:\n        if profesor.nombre == nombre:\n            return profesor",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "get_profesor_nombre",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def get_profesor_nombre(nombre: str):\n    for profesor in profesores_db:\n        if profesor.nombre == nombre:\n            return profesor\n    return {\"error\": \"Profesor no encontrado\"}\n@app.get(\"/profesores/buscarTelefono/{telefono}\")\ndef get_profesor_telefono(telefono: str):\n    for profesor in profesores_db:\n        if profesor.telefono == telefono:\n            return profesor",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "get_profesor_telefono",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def get_profesor_telefono(telefono: str):\n    for profesor in profesores_db:\n        if profesor.telefono == telefono:\n            return profesor\n    return {\"error\": \"Profesor no encontrado\"}\n@app.get(\"/profesores/\")\ndef get_query_telefo_dni(dni: str):\n    for profesor in profesores_db:\n        if profesor.DNI == dni:\n            return profesor",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "get_query_telefo_dni",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def get_query_telefo_dni(dni: str):\n    for profesor in profesores_db:\n        if profesor.DNI == dni:\n            return profesor\n    return {\"error\": \"No hay un profesor con esas características\"}\ndef next_id():\n    return max(profesor.id for profesor in profesores_db) + 1\n@app.post(\"/profesores\" , status_code=201, response_model=Profesor)\ndef añadir_profesor(profesor: Profesor):\n    profesor.id=next_id()",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "next_id",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def next_id():\n    return max(profesor.id for profesor in profesores_db) + 1\n@app.post(\"/profesores\" , status_code=201, response_model=Profesor)\ndef añadir_profesor(profesor: Profesor):\n    profesor.id=next_id()\n    profesores_db.append(profesor)\n    return profesor\n@app.put(\"/profesores\" , response_model=Profesor)\ndef modificar_profesor(id: int, profesor: Profesor):\n        for index, profesor_guardado in enumerate(profesores_db):",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "añadir_profesor",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def añadir_profesor(profesor: Profesor):\n    profesor.id=next_id()\n    profesores_db.append(profesor)\n    return profesor\n@app.put(\"/profesores\" , response_model=Profesor)\ndef modificar_profesor(id: int, profesor: Profesor):\n        for index, profesor_guardado in enumerate(profesores_db):\n            if(profesor_guardado.id == id):\n                profesor.id=id\n                profesores_db[index] = profesor",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "modificar_profesor",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def modificar_profesor(id: int, profesor: Profesor):\n        for index, profesor_guardado in enumerate(profesores_db):\n            if(profesor_guardado.id == id):\n                profesor.id=id\n                profesores_db[index] = profesor\n                return profesor\n        raise HTTPException(status_code=404, detail=\"Profesor no encontrado\")\n@app.delete(\"/profesores/{id}\")\ndef borrar_profesor(id:int):\n    for profesor_guardado in profesores_db:",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "borrar_profesor",
        "kind": 2,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "def borrar_profesor(id:int):\n    for profesor_guardado in profesores_db:\n        if profesor_guardado.id == id:\n            profesores_db.remove(profesor_guardado)\n            return{}\n    raise HTTPException(status_code=404 , detail=\"Profesor no encontrado\")",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "app = FastAPI()\nclass Profesor(BaseModel):\n    id: Optional[int] = None\n    DNI: str\n    nombre: str\n    apellidos: str\n    telefono: str\n    direccion: str\n    cuentaBancaria: str\nprofesores_db = [",
        "detail": "Proyecto.main",
        "documentation": {}
    },
    {
        "label": "profesores_db",
        "kind": 5,
        "importPath": "Proyecto.main",
        "description": "Proyecto.main",
        "peekOfCode": "profesores_db = [\n    Profesor(id=1, DNI=\"123432456A\", nombre=\"Fernando\", apellidos=\"Galiana\", telefono=\"654123456\", direccion=\"Calle Victor Torres\", cuentaBancaria=\"ES3424234234\"),\n    Profesor(id=2, DNI=\"654646747B\", nombre=\"David\", apellidos=\"Bermudez\", telefono=\"654987654\", direccion=\"Avenida Nervion\", cuentaBancaria=\"ES654765873\"),\n    Profesor(id=3, DNI=\"11111111C\", nombre=\"Elena\", apellidos=\"Rivero\", telefono=\"654456789\", direccion=\"Plaza España\", cuentaBancaria=\"ES14342443244\")\n]\n@app.get(\"/\")\ndef root():\n    return {\"message\": \"API de Profesores\"}\n@app.get(\"/profesores\")\ndef get_profesores():",
        "detail": "Proyecto.main",
        "documentation": {}
    }
]